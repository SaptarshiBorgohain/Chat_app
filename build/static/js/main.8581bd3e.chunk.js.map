{"version":3,"sources":["features/userSlice.js","features/chatSlice.js","firebase.js","SidebarChat.js","Sidebar.js","Message.js","Chat.js","IMessage.js","Login.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["userSlice","createSlice","name","initialState","user","reducers","login","state","action","payload","logout","actions","selectUser","chatSlice","chatId","chatName","setChat","selectchatName","chat","selectchatId","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","SidebarChat","id","dispatch","useDispatch","useState","chatInfo","setChatInfo","useEffect","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","onClick","className","Avatar","src","photo","message","timeago","Date","timestamp","toDate","toLocaleString","Sidebar","useSelector","Chats","setChats","Snapshot","signOut","placeholder","IconButton","variant","prompt","add","Message","forwardRef","ref","contents","email","displayName","uid","Chat","input","setInput","messages","setMessages","value","onChange","e","target","type","preventDefault","FieldValue","serverTimestamp","IMessage","Login","alt","Button","signInWithPopup","catch","error","alert","App","onAuthStateChanged","authUser","photoURL","configureStore","reducer","userReducer","chatReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8581bd3e.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const userSlice = createSlice({\r\n  name: 'user',\r\n  initialState: {\r\n    user: null,\r\n  },\r\n  reducers: {\r\n    login: (state, action) => {\r\n      state.user = action.payload;\r\n    },\r\n    logout: (state) => {\r\n      state.user = null;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { login, logout } = userSlice.actions;\r\n\r\nexport const selectUser = (state) => state.user.user;\r\n\r\nexport default userSlice.reducer;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const chatSlice = createSlice({\r\n  name: 'chat',\r\n  initialState: {\r\n    chatId: null,\r\n    chatName: null,\r\n  },\r\n  reducers: {\r\n    setChat: (state, action) => {\r\n      state.chatId = action.payload.chatId;\r\n      state.chatName = action.payload.chatName;\r\n    },\r\n    // logout: (state) => {\r\n    //   state.chat = null;\r\n    // },\r\n  },\r\n});\r\n\r\nexport const { setChat } = chatSlice.actions; // logout execution was done here\r\n\r\nexport const selectchatName = (state) => state.chat.chatName;\r\nexport const selectchatId = (state) => state.chat.chatId;\r\n\r\nexport default chatSlice.reducer;\r\n","import firebase from 'firebase';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyAXy15IkZRUcZfIc0NssMDGu9uctiC-Wj4\",\r\n    authDomain: \"imessage-clone-home.firebaseapp.com\",\r\n    databaseURL: \"https://imessage-clone-home.firebaseio.com\",\r\n    projectId: \"imessage-clone-home\",\r\n    storageBucket: \"imessage-clone-home.appspot.com\",\r\n    messagingSenderId: \"709083016172\",\r\n    appId: \"1:709083016172:web:3e9c62e96128dd5aeaeec9\",\r\n    measurementId: \"G-B31TS0C964\"\r\n  };\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nexport { auth, provider };\r\nexport default db;","import { Avatar } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport './SidebarChat.css';\r\nimport { setChat } from \"./features/chatSlice\";\r\nimport db from './firebase';\r\nimport * as timeago from 'timeago.js';\r\n\r\nfunction SidebarChat({ id, chatName }) {\r\n    const dispatch = useDispatch();\r\n    const [chatInfo, setChatInfo] = useState([]);\r\n\r\nuseEffect(() => {\r\n    db.collection('chats').doc(id).collection('messages').orderBy(\"timestamp\", \"desc\")\r\n    .onSnapshot((snapshot) => \r\n        setChatInfo(snapshot.docs.map((doc) => doc.data()))\r\n    );\r\n}, [id]);\r\n\r\n    return (\r\n        <div onClick={() => {\r\n            dispatch(\r\n                setChat({\r\n                    chatId: id,\r\n                    chatName: chatName,\r\n                })\r\n            )\r\n        }} className = \"SidebarChat\">\r\n            <Avatar src={chatInfo[0]?.photo} />\r\n\r\n            <div className=\"SidebarChat__info\">\r\n                <h3>{chatName}</h3>\r\n                <p>{chatInfo[0]?.message}</p>\r\n                <small>{timeago.format(new Date(chatInfo[0]?.timestamp?.toDate()).toLocaleString())}</small>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SidebarChat\r\n","import { Avatar, IconButton } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from 'react'\r\nimport \"./Sidebar.css\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport RateReviewOutlinedIcon from \"@material-ui/icons/RateReviewOutlined\";\r\nimport SidebarChat from './SidebarChat';\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectUser } from \"./features/userSlice\";\r\nimport db, { auth } from \"./firebase\";\r\n\r\n\r\n\r\nfunction Sidebar() {\r\n    const user = useSelector(selectUser);\r\n    const [Chats, setChats] = useState([])\r\n\r\n    useEffect(() => {\r\n        db.collection('chats').onSnapshot(Snapshot => {\r\n            setChats(Snapshot.docs.map(doc => ({\r\n                id: doc.id,\r\n                data: doc.data(),\r\n            })))\r\n        })\r\n    }, [])\r\n\r\nconst addChat = () => {\r\n\r\n    const chatName = prompt('Please enter a chat name');\r\nif (chatName) {\r\n    db.collection('chats').add ({\r\n        chatName: chatName,\r\n    });\r\n}\r\n\r\n    \r\n};\r\n\r\n    return (\r\n        <div className=\"sidebar\">\r\n\r\n           {/* sidebar__header */}\r\n\r\n            <div className=\"sidebar__header\">\r\n            <Avatar onClick={() => auth.signOut()}\r\n            src={user.photo} className=\"sidebar__avatar\"/>\r\n                <div className=\"sidebar__input\">\r\n                   <SearchIcon />\r\n                   <input placeholder=\"Search\" />\r\n                </div>\r\n            \r\n                <IconButton variant=\"outlined\" className=\"sidebar__inputButton\">\r\n                <RateReviewOutlinedIcon onClick={ addChat } />\r\n                </IconButton>\r\n            </div>\r\n\r\n            {/* Sidebar Chats */}\r\n\r\n            <div className=\"sidebar__chats\">\r\n                {Chats.map(({id, data: { chatName } }) => (\r\n                    <SidebarChat key={id} id={id} chatName={chatName} />\r\n                ))}\r\n            \r\n           \r\n\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar\r\n","import { Avatar } from '@material-ui/core';\r\nimport React, { forwardRef } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectUser } from './features/userSlice';\r\nimport './Message.css';\r\n\r\n//ES6 way\r\nconst Message = forwardRef(({id, \r\n    contents: {\r\n    timestamp, displayName, email, message, photo, uid},\r\n}, ref\r\n) => {\r\n\r\n    const user = useSelector(selectUser)\r\n\r\n    return (\r\n        <div ref={ref}\r\n        className={`message ${user.email === email && \"message__sender\"  }`}>\r\n           <Avatar className=\"message__photo\" src={photo} />\r\n           <p>{message}</p>\r\n\r\n    <small>{new Date(timestamp?.toDate()).toLocaleString()}</small>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default Message\r\n","import React, { useEffect, useState } from 'react';\r\nimport './Chat.css';\r\nimport { IconButton } from \"@material-ui/core\";\r\nimport MicNoneIcon from \"@material-ui/icons/MicNone\";\r\nimport Message from './Message';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectchatId, selectchatName } from './features/chatSlice';\r\nimport db from './firebase';\r\nimport firebase from 'firebase';\r\nimport { selectUser } from './features/userSlice';\r\nimport FlipMove from \"react-flip-move\";\r\n\r\n\r\nfunction Chat() {\r\n     \r\n    const user = useSelector(selectUser);\r\n    const [input, setInput] = useState(\"\");\r\n    // const [messages, setMessages] = useState([]);\r\n    const chatName = useSelector(selectchatName);\r\n    const chatId = useSelector(selectchatId);\r\n    const [messages, setMessages] = useState([]);\r\n    \r\n    useEffect(() => {\r\n       if (chatId) {\r\n           db.collection('chats').doc(chatId).collection(\"messages\").\r\n           orderBy('timestamp', 'desc').onSnapshot(snapshot => (\r\n               setMessages(snapshot.docs.map(doc => ({\r\n                   id: doc.id,\r\n                   data: doc.data()\r\n               })))\r\n           )) ;\r\n       }\r\n    }, [chatId]);\r\n\r\nconst sendMessage = (e) => {\r\n    e.preventDefault();\r\n\r\n    //firebase magic\r\n    db.collection(\"chats\").doc(chatId).collection(\"messages\").add({\r\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n        message: input,\r\n        uid: user.uid,\r\n        photo: user.photo,\r\n        email: user.email,\r\n        displayName: user.displayName,\r\n    });\r\n\r\n    setInput(\"\");\r\n};\r\n\r\n    return (\r\n        <div className=\"chat\">\r\n            {/* Chat header  */}\r\n            <div className=\"chat__header\">\r\n    <h4>To: <span className=\"chat__name\">{chatName}</span></h4>\r\n                <strong>Details</strong>\r\n            </div>\r\n\r\n            {/* chat messages */}\r\n            <div className=\"chat__messages\">\r\n                <FlipMove>\r\n                {messages.map(({ id, data }) => (\r\n                    <Message key = {id} contents = {data} />\r\n                ))}\r\n                </FlipMove>\r\n               \r\n            </div>\r\n\r\n            {/* chat input */}\r\n            <div className=\"chat__input\">\r\n                <form>\r\n                    <input value={input} onChange={(e) => setInput(e.target.value)} placeholder=\"IMessage\" type=\"text\"/>\r\n                    <button onClick={sendMessage} > Send Message </button>\r\n                </form>\r\n\r\n                <IconButton>\r\n                    <MicNoneIcon className=\"chat__mic\"/>\r\n                </IconButton>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat\r\n","import React from 'react';\r\nimport \"./IMessage.css\";\r\nimport Sidebar from \"./Sidebar\";\r\nimport Chat from \"./Chat\";\r\nfunction IMessage() {\r\n    return (\r\n        <div className=\"IMessage\">\r\n          {/* Sidebar */}\r\n          <Sidebar />\r\n          {/* Chat */}  \r\n          <Chat />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default IMessage\r\n","import { Button } from '@material-ui/core';\r\nimport React from 'react';\r\nimport './Login.css';\r\nimport { auth, provider } from \"./firebase\";\r\nfunction Login() {\r\n\r\n    const signIn = () => {\r\n        auth.signInWithPopup(provider)\r\n        .catch((error) => alert(error.message));\r\n    };\r\n    \r\n    return (\r\n        <div className=\"login\">\r\n            <div className=\"login__logo\">\r\n                 <img src=\"https://cdn.jim-nielsen.com/ios/512/spike-email-messenger-chat-2019-05-01.png\" alt=\"\" />\r\n                 <h1>Swift</h1>\r\n            </div>\r\n            <Button onClick={signIn}>Sign In</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import React, { useEffect } from 'react';\r\nimport './App.css';\r\nimport { selectUser, login, logout } from './features/userSlice';\r\nimport IMessage from './IMessage';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Login from \"./Login\";\r\nimport { auth } from \"./firebase\";\r\n\r\nfunction App() {\r\n  const user = useSelector(selectUser);\r\n  const dispatch = useDispatch();\r\n\r\nuseEffect(() => {\r\n   auth.onAuthStateChanged(authUser => {\r\n     if (authUser) {\r\n       // user loged in\r\n       dispatch(login({\r\n         uid: authUser.uid,\r\n         photo: authUser.photoURL,\r\n         email: authUser.email,\r\n         displayName: authUser.displayName,\r\n       }))\r\n     } else {\r\n       // user loged out\r\n       dispatch(logout())\r\n     }\r\n   })\r\n}, [])\r\n\r\n  return (\r\n    // BEM naming convention\r\n    <div className=\"app\">\r\n      {user ? <IMessage/> : <Login /> }\r\n      \r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport userReducer from '../features/userSlice';\r\nimport chatReducer from '../features/chatSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n    chat: chatReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}